{"version":3,"sources":["components/ColoredPixel.js","components/ColorCanvas.js","config.js","App.js","index.js"],"names":["ColoredPixel","props","style_obj","backgroundColor","red","green","blue","height","width","role","style","ColorCanvas","React","useMemo","rgbi_array","counter","i","color_end","color_start","color_step","j","k","push","PROJECT_CONSTANTS","COLOR_START","COLOR_END","STEPS","PLOTTER_HEIGHT","PLOTTER_WIDTH","FlexBox","styled","div","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"+MAwBeA,MAXf,SAAsBC,GAAQ,IAGxBC,EAAY,CACdC,gBAAiB,OAHUF,EAArBG,IAG0B,IAHLH,EAAhBI,MAGmC,IAHnBJ,EAATK,KAGyC,IAC3DC,OAAQ,MACRC,MAAO,OAET,OAAO,qBAAKC,KAAK,MAAMC,MAAOR,KCuBjBS,I,EAAAA,EA/Bf,SAAqBV,GA6BnB,OA5BwBW,IAAMC,SAAQ,WAGpC,IAFA,IAAMC,EAAa,GACfC,EAAU,EAERC,EAAIf,EAAMgB,UACdD,GAAKf,EAAMiB,YACXF,GAAQf,EAAMkB,WAEd,IACE,IAAIC,EAAInB,EAAMgB,UACdG,GAAKnB,EAAMiB,YACXE,GAAQnB,EAAMkB,WAEd,IACE,IAAIE,EAAIpB,EAAMiB,YACdG,GAAKpB,EAAMgB,UACXI,GAAQpB,EAAMkB,WAEdJ,IACAD,EAAWQ,KACT,cAAC,EAAD,CAAuClB,IAAKY,EAAGX,MAAOe,EAAGd,KAAMe,GAA/D,gBAA4BN,KAKpC,OAAOD,IACN,CAACb,EAAMiB,YAAajB,EAAMgB,UAAWhB,EAAMkB,cCJjCI,G,MApCW,CA0BxBC,YAAa,EACbC,UAAW,IACXC,MAAO,EAIPC,eAAgB,IAChBC,cAAe,MC3BXC,E,KAAUC,EAAOC,IAAV,oLAOD,SAAC9B,GAAD,OAAWA,EAAMM,UAClB,SAACN,GAAD,OAAWA,EAAMO,SAqBbwB,MAlBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,qDACA,cAACJ,EAAD,CACEtB,OAAQgB,EAAkBI,eAC1BnB,MAAOe,EAAkBK,cAF3B,SAIE,cAAC,EAAD,CACEV,YAAaK,EAAkBC,YAC/BP,UAAWM,EAAkBE,UAC7BN,WAAYI,EAAkBG,cCvBlCQ,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.fddecdf0.chunk.js","sourcesContent":["/**\r\n * @author Ketan Bhalerao\r\n * @description This component generates div\r\n * with background color specified by props red, green, blue\r\n * e.g if red - 80, green - 80, blue - 16, which is #505010 in hex\r\n * will generate color similar to Henna\r\n *\r\n * @todo - We are hardcoding pixels height,width size to 1px,\r\n * which can be converted to config based\r\n *\r\n * @param {red, green, blue} props\r\n */\r\n\r\nfunction ColoredPixel(props) {\r\n  const { red, green, blue } = props;\r\n\r\n  var style_obj = {\r\n    backgroundColor: \"rgb(\" + red + \",\" + green + \",\" + blue + \")\",\r\n    height: \"1px\",\r\n    width: \"1px\"\r\n  };\r\n  return <div role=\"div\" style={style_obj} />;\r\n}\r\n\r\nexport default ColoredPixel;\r\n","import React from \"react\";\r\nimport ColoredPixel from \"./ColoredPixel\";\r\n\r\n/**\r\n * @author Ketan Bhalerao\r\n * @description This component generates array of ColoredPixel Components\r\n * based on props passed, list of props it accepts are given below\r\n * e.g if start - 8, end - 256, step - 8,\r\n * it will generate 32768 components with those many distinct r,g,b values\r\n *\r\n * @param {color_start, color_end, color_step} props\r\n */\r\n\r\nfunction ColorCanvas(props) {\r\n  const pixel_rgb_array = React.useMemo(() => {\r\n    const rgbi_array = [];\r\n    let counter = 0;\r\n    for (\r\n      let i = props.color_end;\r\n      i >= props.color_start;\r\n      i = i - props.color_step\r\n    ) {\r\n      for (\r\n        let j = props.color_end;\r\n        j >= props.color_start;\r\n        j = j - props.color_step\r\n      ) {\r\n        for (\r\n          let k = props.color_start;\r\n          k <= props.color_end;\r\n          k = k + props.color_step\r\n        ) {\r\n          counter++;\r\n          rgbi_array.push(\r\n            <ColoredPixel key={`value=${counter}`} red={i} green={j} blue={k} />\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return rgbi_array;\r\n  }, [props.color_start, props.color_end, props.color_step]);\r\n\r\n  return pixel_rgb_array;\r\n}\r\nexport default ColorCanvas;\r\n","const PROJECT_CONSTANTS = {\r\n  /*\r\n  RGB - Red, Green, Blue Color Model \r\n  follows 2 Digit HEX Number format\r\n  which in decimal representation \r\n  ranges from 0 to 256\r\n  \r\n  Color Start & End is any number between above range\r\n\r\n  It along with Steps is used to generate range of colors \r\n  e.g if start - 8, end 256, step - 8, below sequence/array will be generated \r\n  & will be plottd in \r\n  DIV/Region of dimension 128 x 256\r\n\r\n  8 8 8\r\n  8 8 16\r\n  ...\r\n  8 8 256\r\n\r\n  8 16 8\r\n  8 16 16\r\n  ...\r\n  8 16 256\r\n  ...\r\n  256 256 256\r\n  */\r\n  COLOR_START: 8,\r\n  COLOR_END: 256,\r\n  STEPS: 8,\r\n  /*\r\n  PLOTTER HEIGHT, WIDTH in pixels\r\n   */\r\n  PLOTTER_HEIGHT: 128,\r\n  PLOTTER_WIDTH: 256\r\n};\r\n\r\nexport default PROJECT_CONSTANTS;\r\n","import React from \"react\";\nimport ColorCanvas from \"./components/ColorCanvas\";\nimport \"./App.css\";\nimport PROJECT_CONSTANTS from \"./config\";\nimport styled from \"styled-components\";\n\nconst FlexBox = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column-reverse;\n  top: 50%;\n  left: 50%;\n  margin: auto;\n  height: ${(props) => props.height}px;\n  width: ${(props) => props.width}px;\n`;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Color Plotted Image</h1>\n      <FlexBox\n        height={PROJECT_CONSTANTS.PLOTTER_HEIGHT}\n        width={PROJECT_CONSTANTS.PLOTTER_WIDTH}\n      >\n        <ColorCanvas\n          color_start={PROJECT_CONSTANTS.COLOR_START}\n          color_end={PROJECT_CONSTANTS.COLOR_END}\n          color_step={PROJECT_CONSTANTS.STEPS}\n        />\n      </FlexBox>\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}